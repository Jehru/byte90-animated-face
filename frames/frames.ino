// remote_pet_face.ino
// ----------------------------------------
// Eyes animations with default blink loop and triggered wink
// ----------------------------------------

#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

#include "blink.h"   // generated frames for blinking eyes
#include "wink.h"    // generated frames for winking eye

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET   -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Hardware trigger for “picked‑up” event.
// Replace with your IMU interrupt or other detection logic as needed.
#define PICKUP_PIN 2

//-----------------------------------------
// Forward declarations
//-----------------------------------------
void playAnimation(const unsigned char *frames[], uint8_t frameCount, uint8_t loops, uint16_t frameDelay);
void blinkAnimation();
void winkAnimation();

//-----------------------------------------
// Frame tables generated by Image2CPP
//-----------------------------------------
const unsigned char *BLINK_FRAMES[] = {
  epd_bitmap_frame_03_delay_0,
  epd_bitmap_frame_04_delay_0,
  epd_bitmap_frame_05_delay_0,
  epd_bitmap_frame_07_delay_0,
  epd_bitmap_frame_17_delay_0};
const uint8_t BLINK_COUNT = sizeof(BLINK_FRAMES) / sizeof(BLINK_FRAMES[0]);

const unsigned char *WINK_FRAMES[] = {
  winkframe_03_delay_0,
  winkframe_04_delay_0,
  winkframe_05_delay_0,
  winkframe_07_delay_0,
  winkframe_17_delay_0};
const uint8_t WINK_COUNT = sizeof(WINK_FRAMES) / sizeof(WINK_FRAMES[0]);

//-----------------------------------------
// Arduino setup / loop
//-----------------------------------------
void setup() {
  pinMode(PICKUP_PIN, INPUT_PULLUP);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    for (;;) {} // fatal – hang here
  }
  display.clearDisplay();
  display.display();
}

void loop() {
  // Default idle state – keep blinking forever
  blinkAnimation();

  // If the robot is picked up, perform a cheeky wink once or twice then
  // return to the default blinking state.
  if (digitalRead(PICKUP_PIN) == LOW) {        // active‑low trigger
    for (uint8_t i = 0; i < 2; ++i) {
      winkAnimation();
    }
    // crude debounce / cooldown so we don’t retrigger immediately
    delay(300);
  }
}

//-----------------------------------------
// Animation helpers
//-----------------------------------------

void blinkAnimation() {
  playAnimation(BLINK_FRAMES, BLINK_COUNT, 1, 80);  // one blink cycle
}

void winkAnimation() {
  playAnimation(WINK_FRAMES, WINK_COUNT, 1, 80);    // one wink cycle
}

/**
 * Generic animation player that shows a sequence of bitmaps full‑screen.
 * @param frames      Pointer to an array of frame bitmaps.
 * @param frameCount  Number of frames in the array.
 * @param loops       How many times to repeat the full sequence.
 * @param frameDelay  Delay (ms) between frames.
 */
void playAnimation(const unsigned char *frames[], uint8_t frameCount, uint8_t loops, uint16_t frameDelay) {
  for (uint8_t l = 0; l < loops; ++l) {
    for (uint8_t i = 0; i < frameCount; ++i) {
      display.clearDisplay();
      display.drawBitmap(0, 0, frames[i], SCREEN_WIDTH, SCREEN_HEIGHT, 1);
      display.display();
      delay(frameDelay);
    }
  }
}
